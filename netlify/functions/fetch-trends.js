// netlify/functions/fetch-trends.js
const NewsAPI = require('newsapi');
const crypto = require('crypto');
// M·ªöI: Import th∆∞ vi·ªán google-trends-api
const googleTrends = require('google-trends-api');

const newsapi = new NewsAPI(process.env.NEWS_API_KEY);

// --- C√ÅC H√ÄM HELPER (Gi·ªØ nguy√™n) ---
function toDateStr(d) {
    const dt = d ? new Date(d) : new Date();
    return isNaN(dt.getTime()) ? new Date().toISOString().split("T")[0] : dt.toISOString().split("T")[0];
}

function toSortValue(d) {
    const dt = d ? new Date(d) : null;
    return dt && !isNaN(dt.getTime()) ? dt.getTime() : 0;
}

function normalizeNewsApiArticle(article) {
    // ... (H√†m n√†y gi·ªØ nguy√™n)
    const { title, description, url, publishedAt, source } = article;
    if (!title || title === "[Removed]" || !url) return null;

    const stableId = crypto.createHash('md5').update(url).digest('hex');
    const baseVotes = Math.floor(Math.random() * 500) + 200;
    
    return {
        id: stableId,
        title_en: title,
        description_en: description || "No description available.",
        title_vi: null,
        description_vi: null,
        category: "Search",
        tags: [source.name.replace(/\s/g, '')],
        votes: baseVotes,
        views: Math.floor(baseVotes * (Math.random() * 10 + 15)),
        interactions: Math.floor(baseVotes * (Math.random() * 3 + 4)),
        searches: Math.floor(baseVotes * (Math.random() * 1 + 1.5)),
        source: url,
        date: toDateStr(publishedAt),
        sortKey: toSortValue(publishedAt),
        submitter: source.name || "Unknown Source",
        region: 'global',
    };
}

function preprocessAndCalculateHotness(trends) {
    // ... (H√†m n√†y gi·ªØ nguy√™n)
    if (!trends || trends.length === 0) return [];
    
    const maxValues = {
        views: Math.max(1, ...trends.map(t => t.views || 0)),
        interactions: Math.max(1, ...trends.map(t => t.interactions || 0)),
        searches: Math.max(1, ...trends.map(t => t.searches || 0)),
        votes: Math.max(1, ...trends.map(t => t.votes || 0)),
    };
    
    const weights = { views: 0.2, interactions: 0.4, searches: 0.3, votes: 0.1 };
    
    trends.forEach(trend => {
        const normViews = (trend.views / maxValues.views) || 0;
        const normInteractions = (trend.interactions / maxValues.interactions) || 0;
        const normSearches = (trend.searches / maxValues.searches) || 0;
        const normVotes = (trend.votes / maxValues.votes) || 0;
        trend.hotnessScore = (normViews * weights.views) + (normInteractions * weights.interactions) + (normSearches * weights.searches) + (normVotes * weights.votes);
    });

    return trends;
}

// --- H√ÄM M·ªöI: T·∫°o "trend ·∫£o" t·ª´ d·ªØ li·ªáu Google Trends ---
function createVirtualTrendFromGoogle(searchTerm, trendsData) {
    console.log(`üí° Creating virtual trend for "${searchTerm}" from Google Trends data.`);
    
    // Google Trends tr·∫£ v·ªÅ gi√° tr·ªã t·ª´ 0-100.
    // L·∫•y gi√° tr·ªã trung b√¨nh trong 7 ng√†y qua ƒë·ªÉ l√†m "ƒë·ªô hot" c∆° b·∫£n.
    const interestValues = trendsData.map(point => point.value[0]);
    const averageInterest = interestValues.reduce((a, b) => a + b, 0) / (interestValues.length || 1);

    // N·∫øu ƒë·ªô hot trung b√¨nh qu√° th·∫•p, coi nh∆∞ kh√¥ng c√≥ xu h∆∞·ªõng
    if (averageInterest < 5) {
        console.log(`-> Interest for "${searchTerm}" is too low (${averageInterest.toFixed(2)}). Skipping.`);
        return null;
    }

    // M√¥ ph·ªèng c√°c ch·ªâ s·ªë d·ª±a tr√™n ƒë·ªô hot t·ª´ Google.
    // C√°c h·ªá s·ªë nh√¢n (500, 1500, etc.) c√≥ th·ªÉ ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh ƒë·ªÉ thang ƒëo h·ª£p l√Ω h∆°n.
    const baseMetric = averageInterest * 500;
    
    const virtualTrend = {
        id: crypto.createHash('md5').update(`virtual-${searchTerm}`).digest('hex'),
        title_en: searchTerm,
        description_en: `This is a virtual trend generated based on Google Trends data for the keyword "${searchTerm}". The chart reflects its interest over time.`,
        title_vi: searchTerm,
        description_vi: `ƒê√¢y l√† m·ªôt xu h∆∞·ªõng ·∫£o ƒë∆∞·ª£c t·∫°o ra d·ª±a tr√™n d·ªØ li·ªáu Google Trends cho t·ª´ kh√≥a "${searchTerm}". Bi·ªÉu ƒë·ªì ph·∫£n √°nh m·ª©c ƒë·ªô quan t√¢m theo th·ªùi gian.`,
        category: "Google Trends",
        tags: ['virtual', 'googletrends'],
        // M√¥ ph·ªèng c√°c ch·ªâ s·ªë d·ª±a tr√™n gi√° tr·ªã trung b√¨nh
        votes: Math.round(baseMetric * 0.5),
        views: Math.round(baseMetric * 10),
        interactions: Math.round(baseMetric * 3),
        searches: Math.round(baseMetric * 15),
        source: `https://trends.google.com/trends/explore?q=${encodeURIComponent(searchTerm)}`,
        date: new Date().toISOString(),
        sortKey: new Date().getTime(),
        submitter: "Google Trends",
        region: 'global',
        // G√°n d·ªØ li·ªáu th√¥ t·ª´ Google Trends v√†o ƒë·ªÉ front-end c√≥ th·ªÉ s·ª≠ d·ª•ng
        isVirtual: true,
        interestData: trendsData
    };

    return virtualTrend;
}


// --- HANDLER CH√çNH ƒê√É ƒê∆Ø·ª¢C N√ÇNG C·∫§P ---
exports.handler = async (event) => {
    const headers = { "Content-Type": "application/json", "Access-Control-Allow-Origin": "*" };
    
    if (event.httpMethod !== "GET") {
        return { statusCode: 405, headers, body: JSON.stringify({ success: false, message: "Method Not Allowed" }) };
    }

    try {
        const { searchTerm } = event.queryStringParameters;

        if (!searchTerm || searchTerm.trim() === '') {
            return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ success: false, message: "searchTerm parameter is required." }),
            };
        }

        if (!process.env.NEWS_API_KEY) {
            throw new Error("NEWS_API_KEY is not configured on the server.");
        }

        // === B∆Ø·ªöC 1: LU·ªíNG ∆ØU TI√äN - T√åM KI·∫æM TR√äN NEWSAPI ===
        console.log(`üöÄ [Primary] Performing live search on NewsAPI for: "${searchTerm}"`);
        const response = await newsapi.v2.everything({
            q: searchTerm,
            sortBy: 'relevancy',
            pageSize: 20,
            language: 'en'
        });

        if (response.status !== 'ok') {
            throw new Error(response.message || "Failed to fetch from NewsAPI");
        }

        let searchResults = response.articles
            .map(article => normalizeNewsApiArticle(article))
            .filter(Boolean);

        // === B∆Ø·ªöC 2: KI·ªÇM TRA K·∫æT QU·∫¢ V√Ä CH·∫†Y LU·ªíNG D·ª∞ PH√íNG (N·∫æU C·∫¶N) ===
        if (searchResults.length > 0) {
            console.log(`‚úÖ [Primary] Found ${searchResults.length} articles. Returning results.`);
            searchResults = preprocessAndCalculateHotness(searchResults);
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ success: true, trends: searchResults }),
            };
        }
        
        // --- N·∫æU KH√îNG C√ì K·∫æT QU·∫¢ T·ª™ NEWSAPI, CHUY·ªÇN SANG GOOGLE TRENDS ---
        console.log(`‚ö†Ô∏è [Primary] No articles found. Switching to [Fallback] Google Trends API.`);

        const sevenDaysAgo = new Date();
        sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

        const trendsResponse = await googleTrends.interestOverTime({
            keyword: searchTerm,
            startTime: sevenDaysAgo,
        });

        const parsedResponse = JSON.parse(trendsResponse);
        const timelineData = parsedResponse.default.timelineData;

        if (!timelineData || timelineData.length === 0) {
             console.log(`‚ùå [Fallback] No data from Google Trends for "${searchTerm}".`);
            // Tr·∫£ v·ªÅ m·∫£ng r·ªóng, front-end s·∫Ω hi·ªÉn th·ªã "No trends found"
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ success: true, trends: [] }),
            };
        }

        // T·∫°o m·ªôt "trend ·∫£o" t·ª´ d·ªØ li·ªáu Google
        const virtualTrend = createVirtualTrendFromGoogle(searchTerm, timelineData);
        
        // N·∫øu trend ·∫£o ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng (ƒë·ªô hot ƒë·ªß l·ªõn)
        if (virtualTrend) {
            // ƒê·∫∑t n√≥ v√†o m·ªôt m·∫£ng v√† t√≠nh hotness score
            let virtualResults = preprocessAndCalculateHotness([virtualTrend]);
            console.log(`‚úÖ [Fallback] Successfully created a virtual trend.`);
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ success: true, trends: virtualResults }),
            };
        } else {
            // N·∫øu ƒë·ªô hot qu√° th·∫•p, v·∫´n tr·∫£ v·ªÅ m·∫£ng r·ªóng
            return {
                statusCode: 200,
                headers,
                body: JSON.stringify({ success: true, trends: [] }),
            };
        }

    } catch (err) {
        console.error("fetch-trends handler error:", err);
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ success: false, error: "Failed to perform search", message: err.message }),
        };
    }
};
